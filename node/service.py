from enum import Enum

from uc_flow_nodes.schemas import NodeRunContext
from uc_flow_nodes.service import NodeService
from uc_flow_nodes.views import execute, info
from uc_flow_schemas import flow
from uc_flow_schemas.flow import (DisplayOptions, OptionValue, Property,
                                  RunState)


class InputMode(str, Enum):
    email = "email"
    datetime = "datetime"


class NodeType(flow.NodeType):
    id: str = "8d43459a-6395-45fd-80c6-b7c0722ebc4e"
    type: flow.NodeType.Type = flow.NodeType.Type.action
    name: str = "Practice Service"
    displayName: str = "Practice Service"
    icon: str = '<svg><text x="8" y="50" font-size="50">üßê</text></svg>'
    description: str = "Practice Service"
    properties: list[Property] = [
        Property(
            displayName="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ",
            description="–ß–∏—Å–ª–æ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ",
            name="field_str",
            type=Property.Type.STRING,
            required=True,
            default="12",
        ),
        Property(
            displayName="–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ",
            description="–ß–∏—Å–ª–æ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ",
            name="field_int",
            type=Property.Type.NUMBER,
            required=True,
            default=42,
        ),
        Property(
            displayName="–í–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ?",
            description="–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—á–∏—Å–ª–æ/—Å—Ç—Ä–æ–∫–∞)",
            name="return_int",
            type=Property.Type.BOOLEAN,
            default=True,
        ),
        Property(
            displayName="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
            description="–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
            name="additional_input",
            type=Property.Type.BOOLEAN,
            noDataExpression=True,
            default=False,
        ),
        Property(
            displayName="–¢–∏–ø –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ 1",
            name="input_mode1",
            type=Property.Type.OPTIONS,
            noDataExpression=True,
            options=[
                OptionValue(
                    name="–ü–æ—á—Ç–∞",
                    value=InputMode.email,
                    description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ —Å –ø–æ—á—Ç–æ–π –¥–ª—è –≤–≤–æ–¥–∞",
                ),
                OptionValue(
                    name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                    value=InputMode.datetime,
                    description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –≤–≤–æ–¥–∞",
                ),
            ],
            displayOptions=DisplayOptions(
                show={"additional_input": [True]},
            ),
        ),
        Property(
            displayName="–¢–∏–ø –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ 2",
            name="input_mode2",
            type=Property.Type.OPTIONS,
            noDataExpression=True,
            options=[
                OptionValue(
                    name="–ü–æ—á—Ç–∞",
                    value=InputMode.email,
                    description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ —Å –ø–æ—á—Ç–æ–π –¥–ª—è –≤–≤–æ–¥–∞",
                ),
                OptionValue(
                    name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                    value=InputMode.datetime,
                    description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –≤–≤–æ–¥–∞",
                ),
            ],
            displayOptions=DisplayOptions(
                show={"additional_input": [True]},
            ),
        ),
        Property(
            displayName="–ü–æ—á—Ç–∞",
            name="email",
            type=Property.Type.EMAIL,
            default='',
            displayOptions=DisplayOptions(
                show={
                    "additional_input": [True],
                    "input_mode1": [InputMode.email],
                    "input_mode2": [InputMode.email],
                },
            ),
        ),
        Property(
            displayName="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            name="datetime",
            type=Property.Type.DATETIME,
            default='',
            displayOptions=DisplayOptions(
                show={
                    "additional_input": [True],
                    "input_mode1": [InputMode.datetime],
                    "input_mode2": [InputMode.datetime],
                },
            ),
        )
    ]


class InfoView(info.Info):
    class Response(info.Info.Response):
        node_type: NodeType


class ExecuteView(execute.Execute):
    async def post(self, json: NodeRunContext) -> NodeRunContext:
        try:
            result_sum = sum((
                int(json.node.data.properties["field_str"]),
                json.node.data.properties["field_int"],
            ))
            if not json.node.data.properties["return_int"]:
                result_sum = str(result_sum)
            # Can produce network error
            await json.save_result({
                "sum": result_sum,
                "email": json.node.data.properties["email"],
                "datetime": json.node.data.properties["datetime"],
            })
            json.state = RunState.complete
        except Exception as e:
            self.log.warning(f"Error {e}")
            await json.save_error({"error": str(e)})
            json.state = RunState.error
        return json


class Service(NodeService):
    class Routes(NodeService.Routes):
        Info = InfoView
        Execute = ExecuteView
